<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lanbin Leo</title>
  
  <subtitle>初中生的成长日记</subtitle>
  <link href="https://blog.lanbin.top/rss.xml" rel="self"/>
  
  <link href="https://blog.lanbin.top/"/>
  <updated>2025-06-30T10:57:08.309Z</updated>
  <id>https://blog.lanbin.top/</id>
  
  <author>
    <name>Leo Huo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>When AI Meets Teen Mental Health: A Journey of Two 16-Year-Old High Schoolers</title>
    <link href="https://blog.lanbin.top/p/cbf91797.html"/>
    <id>https://blog.lanbin.top/p/cbf91797.html</id>
    <published>2025-06-30T17:38:16.000Z</published>
    <updated>2025-06-30T10:57:08.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/0621header.png" alt="Header Image"></p><p>Imagine this scenario: It’s 2 AM, and a high school student lies awake, anxious and confused after a family argument. Traditional counseling appointments require weeks of waiting, plus notifying parents and teachers—making an already vulnerable teen even more hesitant to seek help. But what if there was a professional yet warm AI assistant that could provide immediate emotional support, help them sort through their thoughts, and when necessary, smoothly guide them toward professional help?</p><p>This isn’t a sci-fi plot—it’s the reality that the ReachIn mental health support platform is working to create.</p><h2 id="Background-Research-The-Problem-is-Worse-Than-You-Think"><a href="#Background-Research-The-Problem-is-Worse-Than-You-Think" class="headerlink" title="Background Research: The Problem is Worse Than You Think"></a>Background Research: The Problem is Worse Than You Think</h2><h3 id="The-Overlooked-Teen-Mental-Health-Crisis"><a href="#The-Overlooked-Teen-Mental-Health-Crisis" class="headerlink" title="The Overlooked Teen Mental Health Crisis"></a>The Overlooked Teen Mental Health Crisis</h3><p>Our research revealed a shocking reality: In our survey of 36 high school students, 69.4% are experiencing identity confusion, 66.7% face academic pressure, and 61.1% are affected by family conflicts. This means 7 out of every 10 teenagers have been found to be quietly suffering from psychological distress, with likely even more in the silent majority.</p><p>What’s more concerning is that despite such widespread mental health struggles, 38.9% of students know nothing about their school’s Psychological Counseling Center (PCC), and 47.2% show low willingness to seek traditional counseling (scoring 1-2 points). The average willingness to seek traditional help was only 2.44 points (out of 5), showing clear room for improvement in existing mental health support systems.</p><!-- 0621Img1 --><p><img src="/assets/0621Img1.png" alt="Survey Results"></p><p><em>Figure 1: Teen Mental Health Survey Results</em></p><h3 id="The-“Triple-Barriers”-of-Traditional-Counseling"><a href="#The-“Triple-Barriers”-of-Traditional-Counseling" class="headerlink" title="The “Triple Barriers” of Traditional Counseling"></a>The “Triple Barriers” of Traditional Counseling</h3><p>Through in-depth research, we found that students’ reluctance to seek psychological help can be summarized as “triple barriers”:</p><ol><li><strong>Privacy Barriers</strong>: School counseling appointment processes usually require notifying teachers and parents, making students feel exposed and unsafe</li><li><strong>Cultural Barriers</strong>: Especially in Asian cultural contexts, discussing mental health issues is still seen as a sign of “weakness”</li><li><strong>Access Barriers</strong>: Complex appointment procedures, limited counseling hours, and the conflict between 24&#x2F;7 emotional support needs and limited working hours</li></ol><p>It was against this background that the ReachIn mental health support platform was born.</p><h2 id="A-Story-of-Self-Growth-When-Two-16-Year-Olds-Met-AI"><a href="#A-Story-of-Self-Growth-When-Two-16-Year-Olds-Met-AI" class="headerlink" title="A Story of Self-Growth: When Two 16-Year-Olds Met AI"></a>A Story of Self-Growth: When Two 16-Year-Olds Met AI</h2><p>ReachIn’s story begins in a drama rehearsal room. Project co-founder Jason, while participating in the drama club, found himself naturally becoming a listener for his peers—when friends shared family tensions, social anxiety, or academic pressure, he helped them identify emotional patterns through affirming feelings and asking clarifying questions. This informal peer support often brought unexpected positive results.</p><p>However, when Jason tried to transform this informal experience into a structured peer counseling model, he encountered real setbacks. Discussions with psychology clubs and teachers showed that in tight-knit school communities, keeping secrets is difficult, and students—even with good training—cannot reliably identify signs of serious psychological risk.</p><p>Meanwhile, another member, Leo, often dealt with emotional issues. As an ENFJ in MBTI personality types, he’s particularly sensitive to emotional changes in people around him and himself, so he often gets caught in emotional whirlpools. He was also one of Jason’s regular counseling clients.</p><p>As a tech guy who often interacts with AI, one day when he was feeling down, he experimentally turned to AI to express his sadness. The results were surprisingly good. The AI model not only helped him analyze the causes of his current situation but also gave him many practical and effective methods for emotional regulation. Leo returned to his dorm with a wealth of insights.</p><p>This made him realize AI models’ natural advantages in precisely managing emotions and response speed. However, most Chinese AI products don’t do well in user experience—models only have context within the current conversation, lacking local and global memory functions. This isn’t very useful for psychological counseling, as users have to resend their background information and struggles to the AI every time.</p><p>In one conversation, as a developer proficient in Python, Java, and other programming languages, Leo proposed a bold idea: Could they build a model that combines peer-like empathy with structured technical support—a digital platform that maintains the warmth of human connection while providing instant responses and more effective risk management?</p><!-- 0621GroupPhoto.png --><p><img src="/assets/0621GroupPhoto.png" alt="Team Photo"><br><em>Figure 2: ReachIn team photo on presentation day, Jason on the left, Leo on the right</em></p><h2 id="Technical-Architecture-Not-Just-a-Chatbot-But-an-Intelligent-Companion"><a href="#Technical-Architecture-Not-Just-a-Chatbot-But-an-Intelligent-Companion" class="headerlink" title="Technical Architecture: Not Just a Chatbot, But an Intelligent Companion"></a>Technical Architecture: Not Just a Chatbot, But an Intelligent Companion</h2><p>The ReachIn platform goes far beyond traditional chatbot concepts. From a technical perspective, it’s a full-stack solution with modern architecture:</p><p><strong>Frontend Tech Stack:</strong></p><ul><li>Vue.js + TypeScript: Provides responsive user interface for efficiency</li><li>Pinia state management: Ensures smooth user experience, improving performance and maintainability</li><li>TailwindCSS: Creates clean and warm design, reducing CSS redundancy and improving access speed</li></ul><p><strong>Backend Tech Stack:</strong></p><ul><li>FastAPI + Python: High-performance asynchronous API service supporting high concurrency</li><li>SQLAlchemy: Reliable data management, with Java-written core startup scripts</li><li>Milvus vector database: Core of AI memory system, supporting efficient vector storage and retrieval</li><li>MongoDB: Flexible conversation storage supporting complex queries and analysis, plus full-text storage</li></ul><!-- 0621Vue.png --><p><img src="/assets/0621Vue.png" alt="Frontend Architecture"><br><em>Figure 3: ReachIn Frontend Architecture</em></p><p>But if that’s all, it would just be another “wrapper” chatbot. ReachIn’s core lies in its intelligent agent design:</p><ol><li><p><strong>Ultimate Trust and Control</strong></p><ul><li>We don’t want users to feel monitored. To provide a safe space, users can choose the AI agent’s name, personality response style, etc.</li><li>Users can also upload their “resume” to help the AI system understand them faster</li><li>Users can delete conversation records anytime or lock conversations that require password access (backend uses AES encryption for text data, referencing <strong>Privacy Vault</strong>)</li><li>Users can choose AI context or what human counselors can see, ensuring privacy remains firmly in their control</li></ul></li><li><p><strong>Smart Memory System</strong>:</p><ul><li>Divided into short-term and long-term memory, users can manage all memories</li><li>AI based on vector database can remember user preferences, important people and events, naturally referencing them in future conversations</li><li>Users can reference any memory anytime or adjust and delete memories</li></ul></li></ol><!-- 0621LeoTrial.png --><p><img src="/assets/0621LeoTrial.png" alt="Leo Trial"><br><em>Figure 4: Showing ReachIn platform’s customization features</em></p><ol start="3"><li><p><strong>Character and Event Cards</strong>:</p><ul><li>Users can track key people or moments, and AI will use them as relevant reference points</li><li>This feature allows users to easily mention events or people in new conversations and continue discussions without re-explaining background each time</li></ul></li><li><p><strong>Multi-Model Selection</strong>:</p><ul><li>Users can choose the AI model that best suits them, customizing interactions to match their comfort zone</li><li>Choose models based on user preferences, like DeepSeek for better Chinese writing, GPT-4.1 for more rational objectivity, Claude for better care</li></ul></li></ol><!-- 0621ModelSelect.png --><p><img src="/assets/0621ModelSelect.png" alt="Model Selection"><br><em>Figure 5: Showing ReachIn platform’s multi-model selection feature</em></p><ol start="5"><li><p><strong>Privacy Vault</strong>:</p><ul><li>Users can set password protection for specific conversations, with all data deletable or exportable anytime</li><li>Through AES encryption technology and six-digit numeric passwords, ensuring users feel privacy security while providing technical protection</li></ul></li><li><p><strong>Seamless Handoff</strong>:</p><ul><li>When professional intervention is detected as needed, the system can smoothly guide users toward human counselors</li><li>Users can choose what context counselors see, ensuring privacy and trust</li><li>When emergencies occur (like suicide risk), the system automatically triggers emergency response mechanisms, communicating with user-set emergency contacts to ensure safety</li><li>User safety always comes first</li></ul></li></ol><!-- 0621HumanHandoff.png --><p><img src="/assets/0621HumanHandoff.png" alt="Human Handoff"><br><em>Figure 6: Showing ReachIn platform’s human handoff feature</em></p><h2 id="Development-Journey-From-Idea-to-Reality-in-Four-Weeks"><a href="#Development-Journey-From-Idea-to-Reality-in-Four-Weeks" class="headerlink" title="Development Journey: From Idea to Reality in Four Weeks"></a>Development Journey: From Idea to Reality in Four Weeks</h2><p>ReachIn platform development coincided with the school’s final project, giving the two teens four complete weeks to dedicate to product research and development. By combining AI-assisted programming and using pre-written components and reusing previously developed code, the development team created an MVP product in four weeks.</p><h3 id="Week-1-Basic-Architecture-Setup"><a href="#Week-1-Basic-Architecture-Setup" class="headerlink" title="Week 1: Basic Architecture Setup"></a>Week 1: Basic Architecture Setup</h3><p>The team first clarified the core problems to solve and target users, began building basic backend architecture including user registration&#x2F;login and basic conversation features. They also completed frontend user interface design and single conversation interaction implementation. During this time, Leo and Jason had extensive discussions, determining the product’s core features and problems the MVP version needed to solve.</p><!-- 0621MindMap.png --><p><img src="/assets/0621MindMap.png" alt="Mind Map"><br><em>Figure 7: Showing ReachIn platform’s mind map</em></p><!-- 0621DiscussionRecording.png --><p><img src="/assets/0621DiscussionRecording.png" alt="Discussion Recording"><br><em>Figure 8: Discussion records about software features during the discussion process</em></p><!-- 0621OldUIDesign.png --><p><img src="/assets/0621OldUIDesign.png" alt="Old UI Design"><br><em>Figure 9: Old UI design, later replaced</em></p><h3 id="Week-2-AI-Intelligence-Upgrade"><a href="#Week-2-AI-Intelligence-Upgrade" class="headerlink" title="Week 2: AI Intelligence Upgrade"></a>Week 2: AI Intelligence Upgrade</h3><p>This week was the key period for technical breakthroughs. We optimized backend code execution, taught AI to call tools and store memories, and optimized prompts to make AI respond to user confusion from a warmer, more professional perspective. We also built vector databases and MongoDB databases, transforming local testing into deployable multi-user form.</p><!-- 0621FastAPI.png --><p><img src="/assets/0621FastAPI.png" alt="FastAPI Architecture"><br><em>Figure 8: ReachIn platform using FastAPI and SQLAlchemy architecture</em></p><!-- 0621Backend.png --><p><img src="/assets/0621Backend.png" alt="Backend Logs"><br><em>Figure 9: Testing platform backend logs</em></p><!-- 0621MongoDB_display_and_python_debugging.png --><p><img src="/assets/0621MongoDB_display_and_python_debugging.png" alt="MongoDB and Python Debugging"><br><em>Figure 10: MongoDB database display and Python debugging, development process screenshots</em></p><h3 id="Week-3-User-Experience-Optimization"><a href="#Week-3-User-Experience-Optimization" class="headerlink" title="Week 3: User Experience Optimization"></a>Week 3: User Experience Optimization</h3><p>The team focused on frontend optimization, ensuring frontend features adapted to backend updates, implementing user information customization, multi-conversation management, memory rendering, thinking rendering, and various card rendering features.</p><!-- 0621RefineSS.png --><p><img src="/assets/0621RefineSS.png" alt="User Experience Optimization"><br><em>Figure 9: MVP platform frontend user experience optimization</em></p><h3 id="Week-4-Testing-and-Iteration"><a href="#Week-4-Testing-and-Iteration" class="headerlink" title="Week 4: Testing and Iteration"></a>Week 4: Testing and Iteration</h3><p>The final week involved small-scale testing and fixing key bugs, including frontend-backend communication inconsistencies and data inconsistencies. The team used strict Git workflow management, completing a total of <strong>18K lines of frontend code and 33K lines of backend code</strong>.</p><p><img src="/assets/S_20250529_001.png" alt="Github Screenshot"><br><em>Figure 10: Backend GitHub repository</em><br><img src="/assets/S_20250529_002.png" alt="Commits Screenshot"><br><em>Figure 11: Backend GitHub commit records</em><br><img src="/assets/S_20250529_004.png" alt="Contribution Screenshot"><br><em>Figure 12: Frontend contribution records</em></p><h2 id="Community-Validation-Let-the-Data-Speak"><a href="#Community-Validation-Let-the-Data-Speak" class="headerlink" title="Community Validation: Let the Data Speak"></a>Community Validation: Let the Data Speak</h2><p>After four weeks, on the school’s product presentation day, we introduced our product and released a survey about school counseling platform usage.</p><h3 id="Surprising-User-Research-Findings"><a href="#Surprising-User-Research-Findings" class="headerlink" title="Surprising User Research Findings"></a>Surprising User Research Findings</h3><p>Results showed AI platform acceptance significantly exceeded traditional counseling:</p><ul><li>AI mental health support platform usage willingness average: <strong>3.28 points</strong></li><li>Traditional counseling help-seeking willingness average: <strong>2.44 points</strong></li><li>Students showing high willingness (4-5 points) for AI platform: <strong>52.8%</strong></li></ul><!-- 0621AiWilling.png --><p><img src="/assets/0621AIWilling.png" alt="AI Platform Usage Willingness"><br><em>Figure 13: AI mental health support platform usage willingness survey results</em></p><p>Meanwhile, among the 40 valid survey responses collected, we found over 60% of students believe their main emotional distress causes include identity and self-worth confusion, excessive academic pressure, and family conflicts with parent-child communication issues. Over 50% also chose interpersonal relationship conflicts.</p><p>We analyzed users’ main concerns in depth:</p><ul><li><strong>Privacy Security Concerns</strong>: 50% of users worry about data security</li><li><strong>AI Empathy Ability Doubts</strong>: 66.7% of users think AI lacks human counselors’ empathy</li><li><strong>Professional Credibility Questions</strong>: 36.1% of users question the professionalism and reliability of AI advice</li></ul><p>Addressing these concerns, ReachIn adopted the following solutions (which further validated our ideas):</p><ul><li><strong>Implement anonymous registration and data encryption with global control</strong> to maximize user privacy protection</li><li><strong>Through warm conversation design and personalized memory</strong>, enhance AI’s emotional connection capability while using RAG technology to provide AI with professional psychological counseling knowledge base</li><li><strong>Establish collaboration mechanisms with professional counselors</strong> to ensure advice professionalism and reliability, while ensuring professionals can intervene when necessary</li></ul><h3 id="Community-Response-and-Beta-Recruitment"><a href="#Community-Response-and-Beta-Recruitment" class="headerlink" title="Community Response and Beta Recruitment"></a>Community Response and Beta Recruitment</h3><p><strong>38.9% of research participants voluntarily signed up for beta testing</strong>, a number far exceeding our expectations. User feedback showed ReachIn successfully solved key pain points of traditional mental health services:</p><blockquote><p>“This platform really makes me feel safe, completely without worrying about others’ opinions, able to express my true feelings without fear of judgment.”<br>—— Anonymous user (Grade 11)</p></blockquote><blockquote><p>“I just uploaded my personal resume, and the AI actually remembered my previously mentioned family situation, naturally referencing my past struggles in subsequent conversations. This made me feel like talking with a close friend.”<br>—— Anonymous user (Grade 10)</p></blockquote><h2 id="Going-Further-Our-Mission-and-Global-Impact"><a href="#Going-Further-Our-Mission-and-Global-Impact" class="headerlink" title="Going Further: Our Mission and Global Impact"></a>Going Further: Our Mission and Global Impact</h2><h3 id="Model-Innovation-From-“Replacement”-to-“Bridge”"><a href="#Model-Innovation-From-“Replacement”-to-“Bridge”" class="headerlink" title="Model Innovation: From “Replacement” to “Bridge”"></a>Model Innovation: From “Replacement” to “Bridge”</h3><p>Unlike many AI applications on the market that try to replace traditional counseling, ReachIn has clearly positioned itself as a <strong>“pre-counseling interface”</strong> from the beginning—not to replace professional counselors, but to become a warm bridge connecting students with professional help.</p><p>This positioning solves a core contradiction in mental health services: <strong>How to provide support to students at the exact moment they need help most—not weeks later during an appointment?</strong></p><!-- 0621mermaid-diagram-final.png --><p><img src="/assets/0621mermaid-diagram-final.png" alt="ReachIn Architecture Diagram"><br><em>Figure 14: Bridge model diagram</em></p><p><strong>ReachIn’s “bridge function” specifically manifests in:</strong></p><ol><li><strong>Emotional Preparation Phase</strong>: Helping students organize thoughts and identify problem cores before seeking professional counseling</li><li><strong>Memory Building Process</strong>: Helping students build clear emotional records and pattern recognition through AI conversations</li><li><strong>Lowering Psychological Barriers</strong>: Letting students adapt to “talking about mental health” in a pressure-free environment</li><li><strong>Seamless Referral Mechanism</strong>: When AI detects need for professional intervention, smoothly guiding students to seek human counseling</li></ol><h3 id="Global-Applicability-and-Localization-Potential"><a href="#Global-Applicability-and-Localization-Potential" class="headerlink" title="Global Applicability and Localization Potential"></a>Global Applicability and Localization Potential</h3><p>Our research found that while teen mental health problems manifest differently globally, core barriers are highly similar:</p><ul><li><strong>Cultural Level</strong>: In Asian cultural contexts, mental health issues are often seen as signs of “weakness,” with discussion heavily stigmatized (many students think: I’m not sick, why should I get counseling?)</li><li><strong>Resource Level</strong>: In developed Western countries, professional counseling resources are scarce, with appointment wait times lasting weeks or even months</li><li><strong>Capacity Level</strong>: In developing regions, there’s a lack of sufficient trained professionals (like Africa, Southeast Asia, etc.)</li></ul><p>ReachIn’s technical solution has high <strong>replicability and cultural adaptability</strong>. The platform’s core architecture can be customized for different regions’ cultural backgrounds, language environments, and educational systems, while maintaining unified standards for underlying AI technology and privacy protection mechanisms.</p><!-- 0621PreperationBeforePresentation.png --><p><img src="/assets/0621PreperationBeforePresentation.png" alt="Preparation Before Presentation"><br><em>Figure 15: Material preparation before the presentation</em></p><h3 id="Deep-Collaboration-with-Professional-Institutions"><a href="#Deep-Collaboration-with-Professional-Institutions" class="headerlink" title="Deep Collaboration with Professional Institutions"></a>Deep Collaboration with Professional Institutions</h3><p>Our collaborative dialogue with the school’s Psychological Counseling Center (PCC) brought an important turning point in project development. This conversation gave us deep understanding of professional mental health service boundaries and responsibilities, and redesigned ReachIn’s role positioning.</p><p><strong>The new collaboration model isn’t competitive but complementary ecosystem:</strong></p><ul><li><strong>AI’s Responsibilities</strong>: 24&#x2F;7 emotional support, daily stress relief, preliminary risk screening, user education guidance</li><li><strong>Professional Counselors’ Focus Areas</strong>: Complex psychological problem diagnosis, crisis intervention, deep therapy, long-term recovery guidance</li><li><strong>Collaboration Mechanisms</strong>: Establish standardized referral processes, share desensitized user insights, create clear ethical boundaries</li></ul><p>We call this model <strong>First Step Communication</strong>—that is, before communicating with professional counselors, first receiving preliminary emotional support and problem identification through AI. Or in day-and-night companionship, helping users relieve daily small emotions (we believe emotions accumulate and eventually become mental illness), thereby reducing professional counselors’ workload.</p><p>This model’s greatest value lies in: <strong>It creates incremental value for the mental health service ecosystem, rather than zero-sum competition.</strong> AI handles large amounts of daily, repetitive emotional support needs, allowing professional counselors to invest limited time and energy into complex cases that truly require human professional judgment.</p><!-- 0621OurResearchPaper.png --><p><img src="/assets/0621OurResearchPaper.png" alt="Our Research Paper"><br><em>Figure 15: Our research survey report (in paper form)</em></p><h2 id="Reflection-and-Learning-Young-Innovators’-Growth-Journey"><a href="#Reflection-and-Learning-Young-Innovators’-Growth-Journey" class="headerlink" title="Reflection and Learning: Young Innovators’ Growth Journey"></a>Reflection and Learning: Young Innovators’ Growth Journey</h2><h3 id="Challenges-and-Breakthroughs"><a href="#Challenges-and-Breakthroughs" class="headerlink" title="Challenges and Breakthroughs"></a>Challenges and Breakthroughs</h3><p><strong>Time Management Lessons:</strong><br>As a two-person team, Leo took on almost all programming work, including frontend and backend development. Although the team made work plans, they often faced delays due to misjudging workload and time requirements. This experience taught them to more carefully assess time needs in future projects.</p><p><strong>Communication Collaboration Optimization:</strong><br>In the second week of development, the team experienced an important communication crisis. Jason was responsible for information gathering, Leo for coding, but they lacked close communication (like daily meetings), causing Leo’s implemented features to not match Jason’s research findings. By establishing daily meetings and communication mechanisms, the team quickly resolved this issue.</p><p><strong>Technical Architecture Evolution:</strong><br>From the initial simple local application to the final distributed cloud architecture, the team also experienced important growth in technical choices. Using Docker containerization, independent database deployment, frontend-backend separation, and other technologies gave them experience with real software development processes serving society.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Although the 4-week Capstone ended, our project and WeService continue. We will keep going, working to make ReachIn a mental health support platform with local community, national, and even international impact.</p><p>ReachIn is just the beginning. We believe that with more young innovators joining, and with further integration of technology and humanistic care, mental health support will become more accessible, timely, and effective. What matters isn’t how advanced the technology is, but whether it can truly serve human wellbeing.</p><p>Experience ReachIn platform: <a href="http://chat.mura.ink/">http://chat.mura.ink/</a> (Not yet open)</p><p>Project open-source address will be released soon, please stay tuned for our updates.</p><p>If this article inspires you, please share it with more friends who care about teen mental health. Every share might reach that young heart searching for light in the darkness.</p><p>Last edited: 2025-06-30 18:46</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/assets/0621header.png&quot; alt=&quot;Header Image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Imagine this scenario: It’s 2 AM, and a high school student lies awake, anxi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>当AI遇见青少年心理健康：两个16岁高中生的心灵之旅</title>
    <link href="https://blog.lanbin.top/p/b27a7634.html"/>
    <id>https://blog.lanbin.top/p/b27a7634.html</id>
    <published>2025-06-30T17:11:01.000Z</published>
    <updated>2025-06-30T10:57:08.309Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/0621header.png" alt="Header Image"></p><p>想象一下这样的场景：凌晨2点，一个高中生因为家庭争吵而失眠，内心充满焦虑和困惑。传统的心理咨询预约需要等待数周，而且还要通知家长和班主任——这让本就脆弱的ta更加望而却步。但如果此时有一个既专业又温暖的AI助手，能够即时提供情感支持，帮助ta理清思绪，甚至在必要时平滑地引导ta寻求专业帮助，会怎样？</p><p>这不是科幻小说的情节，而是ReachIn心理支持平台正在努力实现的现实。</p><h2 id="背景调查：问题比你想象的更严重"><a href="#背景调查：问题比你想象的更严重" class="headerlink" title="背景调查：问题比你想象的更严重"></a>背景调查：问题比你想象的更严重</h2><h3 id="被忽视的青少年心理健康危机"><a href="#被忽视的青少年心理健康危机" class="headerlink" title="被忽视的青少年心理健康危机"></a>被忽视的青少年心理健康危机</h3><p>我们的调研揭示了一个令人震惊的现实：在我们对36名高中生的问卷调查中，69.4%的学生正在经历自我认同困惑，66.7%面临学业压力困扰，61.1%遭受家庭矛盾影响。这意味着每10个青少年中，就有7个已经被发现正在默默承受着心理困扰，而沉默的人群中往往还有更多。</p><p>更令人担忧的是，尽管心理困扰如此普遍，但38.9%的学生对学校心理咨询中心(PCC)完全不了解，47.2%的学生对寻求传统心理咨询表现出低意愿（评分1-2分）。传统求助意愿平均分仅为2.44分（满分5分），这显示现有心理健康支持体系的可以改进的地方。</p><!-- 0621Img1 --><p><img src="/assets/0621Img1.png" alt="调查结果"></p><p><em>图1：青少年心理健康调查结果</em></p><h3 id="传统心理咨询的”三重壁垒”"><a href="#传统心理咨询的”三重壁垒”" class="headerlink" title="传统心理咨询的”三重壁垒”"></a>传统心理咨询的”三重壁垒”</h3><p>通过深入调研，我们发现学生不愿寻求心理帮助的原因可以归纳为”三重壁垒”：</p><ol><li><strong>隐私壁垒</strong>：学校的咨询预约流程通常需要通知班主任和家长，这让学生感到暴露和不安全</li><li><strong>文化壁垒</strong>：特别是在亚洲文化背景下，讨论心理问题仍被视为”软弱”的表现</li><li><strong>接入壁垒</strong>：复杂的预约流程、有限的咨询时间，以及24&#x2F;7情感支持需求与工作时间限制的矛盾</li></ol><p>正是在这样的背景下，ReachIn心理支持平台应运而生。</p><h2 id="自我成长的故事：当两个16岁的求助者遇见AI"><a href="#自我成长的故事：当两个16岁的求助者遇见AI" class="headerlink" title="自我成长的故事：当两个16岁的求助者遇见AI"></a>自我成长的故事：当两个16岁的求助者遇见AI</h2><p>ReachIn的故事要从一间戏剧排练室说起。项目联合创始人Jason在参与戏剧社团时，发现自己经常自然而然地成为同伴们的倾听者——当朋友们分享家庭紧张关系、社交焦虑或学业压力时，他通过肯定情感、询问澄清性问题，帮助他们识别情绪模式。这种非正式的同伴支持往往能带来意想不到的效果。</p><p>然而，当Jason尝试将这种非正式经验转化为结构化的同伴咨询模式时，他遇到了现实的挫折。与心理学社团和教师的讨论表明，在紧密的学校社区中，保守秘密很困难，而且学生——即使经过良好训练——也无法可靠地识别严重心理风险的迹象。</p><p>与此同时，另一位成员Leo经常遇到情绪上的问题，作为MBTI人格中的ENFJ，他对于身边人和自己的情绪变化特别敏感，所以经常会陷入到情绪的漩涡中。他也是Jason心理咨询的常客之一。</p><p>作为一名技术男，他经常和AI打交道，有一天他难过的时候，试验性的去找了AI，诉说着自己的难受，可结果效果却出奇的好。AI模型不仅仅帮他分析了眼下情况出现的原因，还给了他许多切实有效的调整情绪的方法，最后Leo带着满满的收获回到了宿舍。</p><p>这时他就意识到了AI模型在精准把控情绪和回复速度上的天然优势。然而，绝大部分中国国内的AI产品在用户体验这方面做的都不是很好，模型只在当前对话内有上下文，而没有做到局部记忆和全局记忆的功能。这对于心理咨询不是很有用，因为每一次咨询时都得把自己的背景信息和遇到的困境重新发给AI。</p><p>在一次对话中，作为一名精通Python、Java等多种编程语言的开发者，Leo提出了一个大胆的想法：能否构建一个融合同伴式共情与结构化技术支持的模型——一个数字的平台，既保持人际连接的温暖，又能做到即时回复，还能更有效地管理风险？</p><!-- 0621GroupPhoto.png --><p><img src="/assets/0621GroupPhoto.png" alt="团队合照"><br><em>图2：路演当天ReachIn团队合照，左Jason，右Leo</em></p><h2 id="技术架构：不只是聊天机器人，而是一个陪伴的智能体"><a href="#技术架构：不只是聊天机器人，而是一个陪伴的智能体" class="headerlink" title="技术架构：不只是聊天机器人，而是一个陪伴的智能体"></a>技术架构：不只是聊天机器人，而是一个陪伴的智能体</h2><p>ReachIn平台远超传统聊天机器人的概念。从技术的角度触发，它是一个全栈解决方案，采用现代化的技术架构：</p><p><strong>前端技术栈：</strong></p><ul><li>Vue.js + TypeScript：提供响应式用户界面，确保效率</li><li>Pinia状态管理：确保用户体验的流畅性，提升性能和可维护性</li><li>TailwindCSS：打造简洁而温暖的设计，减少CSS冗余，提升访问速度</li></ul><p><strong>后端技术栈：</strong></p><ul><li>FastAPI + Python：高性能异步API服务，支持高并发请求</li><li>SQLAlchemy：可靠的数据管理，Java编写核心启动脚本</li><li>Milvus向量数据库：AI记忆系统的核心，支持高效的向量存储和检索</li><li>MongoDB：灵活的对话存储，支持复杂查询和分析，以及全文存储</li></ul><!-- 0621Vue.png --><p><img src="/assets/0621Vue.png" alt="前端架构"><br><em>图3：ReachIn前端架构</em></p><p>但如果只是这样，未免就是另一个“套壳”的聊天机器人。ReachIn的核心在于其智能体的设计：</p><ol><li><p><strong>极致的信任和掌控感</strong></p><ul><li>我们不希望用户感觉到被监视，为了提供一个安全的空间，用户可以选择AI智能体的名字、性格回复方式等</li><li>用户也可以上传自己的“简历”让AI系统更快地了解用户</li><li>用户可以随时删除对话记录，或者将对话上锁，输入密码后才能查看（后端才用AES加密文本数据，参考<strong>隐私保险库</strong>）</li><li>用户可以选择AI的上下文，或者人类咨询师可以看到的上下文，确保隐私牢牢掌握在自己手中</li></ul></li><li><p><strong>智能记忆系统</strong>：</p><ul><li>分为长短期记忆，用户可以管理所有的记忆</li><li>基于向量数据库的AI能够记住用户的偏好、重要人物和事件，在未来的对话中自然地引用它们</li><li>用户随时可以引用一份记忆，或者对记忆进行调整和删除</li></ul></li></ol><!-- 0621LeoTrial.png --><p><img src="/assets/0621LeoTrial.png" alt="Leo试用"><br><em>图4：展示ReachIn平台的自定义功能</em></p><ol start="3"><li><p><strong>角色与事件卡片</strong>：</p><ul><li>用户可以追踪关键人物或时刻，AI会将它们作为相关的参考点</li><li>该功能使得用户能够在新的对话中轻松提及事件或人物，继续讨论，而不必每次都重新解释背景</li></ul></li><li><p><strong>多模型选择</strong>：</p><ul><li>用户可以选择最适合自己的AI模型，定制交互以匹配自己的舒适区</li><li>根据用户喜好选择模型，比如DeepSeek中文文笔较好，GPT-4.1更加理性可观，Claude更能展现关怀</li></ul></li></ol><!-- 0621ModelSelect.png --><p><img src="/assets/0621ModelSelect.png" alt="模型选择"><br><em>图5：展示ReachIn平台的多模型选择功能</em></p><ol start="5"><li><p><strong>隐私保险库</strong>：</p><ul><li>用户可以对特定对话设置密码保护，所有数据可以随时删除或导出</li><li>通过AES加密技术，以及六位数数字密码，确保用户感受到隐私安全的同时，从技术层面提供了保障</li></ul></li><li><p><strong>无缝转介</strong>：</p><ul><li>当检测到需要专业干预时，系统能够平滑地引导用户转向人工咨询师</li><li>用户可以选择咨询师看到的上下文，确保隐私和信任</li><li>当遇到紧急情况（如自杀风险）时，系统会自动触发紧急响应机制，与用户设置的紧急联系人沟通，确保用户安全</li><li>用户安全永远放在第一位</li></ul></li></ol><!-- 0621HumanHandoff.png --><p><img src="/assets/0621HumanHandoff.png" alt="人类转介"><br><em>图6：展示ReachIn平台的人类转介功能</em></p><h2 id="开发历程：从想法到现实的四周冲刺"><a href="#开发历程：从想法到现实的四周冲刺" class="headerlink" title="开发历程：从想法到现实的四周冲刺"></a>开发历程：从想法到现实的四周冲刺</h2><p>ReachIn平台的开发恰好赶上了学校期末项目，所以两位少年有了四周的完整时间可以投身在产品的调研和开发中。通过结合AI辅助编程，以及使用前人已经写好的组件和复用以前开发的代码，开发团队在四周就做出了一个MVP产品。</p><h3 id="Week-1：基础架构搭建"><a href="#Week-1：基础架构搭建" class="headerlink" title="Week 1：基础架构搭建"></a>Week 1：基础架构搭建</h3><p>团队首先明确了要解决的核心问题和目标用户，开始构建基础的后端架构，包括用户注册登录、基本对话功能。同时完成了前端的用户界面设计和单一对话交互实现。这期间，Leo和Jason进行了大量的讨论，确定了产品的核心功能和MVP版本需要解决的问题。</p><!-- 0621MindMap.png --><p><img src="/assets/0621MindMap.png" alt="思维导图"><br><em>图7：展示ReachIn平台的思维导图</em></p><!-- 0621DiscussionRecording.png --><p><img src="/assets/0621DiscussionRecording.png" alt="讨论记录"><br><em>图8：讨论过程中，关于软件功能的讨论记录</em></p><!-- 0621OldUIDesign.png --><p><img src="/assets/0621OldUIDesign.png" alt="旧UI设计"><br><em>图9：旧的UI设计，后续被替换</em></p><h3 id="Week-2：AI智能化升级"><a href="#Week-2：AI智能化升级" class="headerlink" title="Week 2：AI智能化升级"></a>Week 2：AI智能化升级</h3><p>这一周是技术突破的关键期。我们优化了后端代码执行，让AI学会调用工具和存储记忆，并优化了提示词，使AI能够从更温暖、更专业的角度回应用户困惑。同时构建了向量数据库和MongoDB数据库，将原本的本地测试转变为多用户可部署的形式。</p><!-- 0621FastAPI.png --><p><img src="/assets/0621FastAPI.png" alt="FastAPI架构"><br><em>图8：ReachIn平台采用FastAPI和SQLAlchemy架构</em></p><!-- 0621Backend.png 后端日志截图 --><p><img src="/assets/0621Backend.png" alt="后端日志"><br><em>图9：测试平台的后端日志</em></p><!-- 0621MongoDB_display_and_python_debugging.png --><p><img src="/assets/0621MongoDB_display_and_python_debugging.png" alt="MongoDB和Python调试"><br><em>图10：MongoDB数据库的展示和Python调试，开发过程截图</em></p><h3 id="Week-3：用户体验优化"><a href="#Week-3：用户体验优化" class="headerlink" title="Week 3：用户体验优化"></a>Week 3：用户体验优化</h3><p>团队专注于前端优化，确保前端功能适配后端更新，实现了用户信息定制、多对话管理、记忆渲染功能、思考渲染功能，以及各种卡片的渲染。</p><!-- 0621RefineSS.png --><p><img src="/assets/0621RefineSS.png" alt="用户体验优化"><br><em>图9：MVP平台的前端用户体验优化</em></p><h3 id="Week-4：测试与迭代"><a href="#Week-4：测试与迭代" class="headerlink" title="Week 4：测试与迭代"></a>Week 4：测试与迭代</h3><p>最后一周进行了小规模测试并修复了一些关键bug，包括前后端通信不一致、数据不一致等问题。团队采用严格的Git工作流程管理，总共完成了<strong>前端18K行代码，后端33K行代码</strong>的开发工作。</p><p><img src="/assets/S_20250529_001.png" alt="Github截图"><br><em>图10：后端的GitHub仓库</em><br><img src="/assets/S_20250529_002.png" alt="Commits截图"><br><em>图11：后端的GitHub提交记录</em><br><img src="/assets/S_20250529_004.png" alt="Contribution截图"><br><em>图12：前端的贡献记录</em></p><h2 id="社区认证：数据说话"><a href="#社区认证：数据说话" class="headerlink" title="社区认证：数据说话"></a>社区认证：数据说话</h2><p>四周结束后，在学校的产品路演日，我们介绍了我们的产品，并发布了一个问卷调查，主要是关于学校心理咨询平台使用情况。</p><h3 id="用户调研的惊人发现"><a href="#用户调研的惊人发现" class="headerlink" title="用户调研的惊人发现"></a>用户调研的惊人发现</h3><p>从结果来看，AI平台接受度显著超越传统咨询：</p><ul><li>AI心理支持平台使用意愿平均分：<strong>3.28分</strong></li><li>传统心理咨询求助意愿平均分：<strong>2.44分</strong></li><li>对AI平台表现出高意愿（4-5分）的学生比例：<strong>52.8%</strong></li></ul><!-- 0621AiWilling.png --><p><img src="/assets/0621AIWilling.png" alt="AI平台使用意愿"><br><em>图13：AI心理支持平台使用意愿调查结果</em></p><p>同时，在收集上来的40份有效调查问卷中，我们发现有超过60%的同学认为平时情绪困扰的主要原因有自我认同和价值感缺失、学业压力过重以及家庭矛盾和亲子沟通问题。也有超过50%的同学选择了人际关系冲突。</p><p>我们深入分析了用户的主要顾虑：</p><ul><li><strong>隐私安全担忧</strong>：50%的用户担心数据安全</li><li><strong>AI共情能力质疑</strong>：66.7%的用户认为AI缺乏人类咨询师的共情能力</li><li><strong>专业性质疑</strong>：36.1%的用户质疑AI建议的专业性和可靠性</li></ul><p>针对这些顾虑，ReachIn 采取了以下解决策略（这也更加验证了我们的想法）：</p><ul><li><strong>实施匿名注册和数据加密、全局管控</strong>，最大程度保障用户隐私</li><li><strong>通过温暖的对话设计和个性化记忆</strong>，增强AI的情感连接能力，同时使用RAG技术向AI提供专业心理咨询的知识库</li><li><strong>建立与专业咨询师的协作机制</strong>，确保建议的专业性和可靠性，同时也确保专业人士能够在必要时介入</li></ul><h3 id="社区反响与内测招募"><a href="#社区反响与内测招募" class="headerlink" title="社区反响与内测招募"></a>社区反响与内测招募</h3><p><strong>38.9%的调研参与者主动报名参与内测</strong>，这一数字远超我们的预期。用户反馈显示，ReachIn成功解决了传统心理健康服务的关键痛点：</p><blockquote><p>“这个平台确实让我感到安全，完全不用担心别人的看法，可以在不担心被评判的情况下表达自己的真实感受。”<br>—— 匿名用户（11年级）</p></blockquote><blockquote><p>“我只是上传了我的个人简历，AI竟然记住了我之前提到的家庭情况，而且在后续对话中自然地引用我以前遇到的困惑，这让我感到像是和一个知心朋友在交谈。”<br>—— 匿名用户（10年级）</p></blockquote><h2 id="更进一步：我们的宗旨和全球影响"><a href="#更进一步：我们的宗旨和全球影响" class="headerlink" title="更进一步：我们的宗旨和全球影响"></a>更进一步：我们的宗旨和全球影响</h2><h3 id="模式创新：从”替代”到”桥梁”"><a href="#模式创新：从”替代”到”桥梁”" class="headerlink" title="模式创新：从”替代”到”桥梁”"></a>模式创新：从”替代”到”桥梁”</h3><p>与市场上许多试图替代传统心理咨询的AI应用不同，ReachIn从项目伊始就明确定位为一个**”预咨询接口”**——不是要取代专业心理咨询师，而是要成为连接学生与专业帮助之间的温暖桥梁。</p><p>这种定位解决了心理健康服务中的一个核心矛盾：<strong>如何在学生最需要帮助的确切时刻——而不是几周后的预约时间——为他们提供支持？</strong></p><!-- 0621mermaid-diagram-final.png --><p><img src="/assets/0621mermaid-diagram-final.png" alt="ReachIn架构图"><br><em>图14：桥梁模式示意图</em></p><p><strong>ReachIn的”桥梁功能”具体体现在：</strong></p><ol><li><strong>情感准备阶段</strong>：帮助学生在寻求专业咨询前整理思绪、识别问题核心</li><li><strong>记忆构建过程</strong>：通过AI对话帮助学生建立清晰的情感记录和模式认知</li><li><strong>降低心理门槛</strong>：在无压力环境中让学生适应”谈论心理健康”这件事本身</li><li><strong>无缝转介机制</strong>：当AI检测到需要专业干预时，平滑引导学生寻求人工咨询</li></ol><h3 id="全球适用性与本土化潜力"><a href="#全球适用性与本土化潜力" class="headerlink" title="全球适用性与本土化潜力"></a>全球适用性与本土化潜力</h3><p>我们的研究发现，虽然青少年心理健康问题在全球范围内表现形式各异，但核心障碍却高度相似：</p><ul><li><strong>文化层面</strong>：在亚洲文化背景下，心理健康问题往往被视为”软弱”表现，讨论被严重污名化（许多同学认为，我没病，为什么要去咨询？）</li><li><strong>资源层面</strong>：在欧美发达国家，专业咨询资源稀缺，预约等待时间长达数周甚至数月</li><li><strong>能力层面</strong>：在发展中地区，缺乏足够数量的训练有素专业人员（如非洲、东南亚等地）</li></ul><p>ReachIn提供的技术解决方案具有高度的<strong>可复制性和文化适应性</strong>。平台的核心架构可以根据不同地区的文化背景、语言环境、教育体制进行定制化部署，而底层的AI技术和隐私保护机制保持统一标准。</p><!-- 0621PreperationBeforePresentation.png --><p><img src="/assets/0621PreperationBeforePresentation.png" alt="准备演示"><br><em>图15：路演前夕的物料准备</em></p><h3 id="与专业机构的深度协作"><a href="#与专业机构的深度协作" class="headerlink" title="与专业机构的深度协作"></a>与专业机构的深度协作</h3><p>我们与学校心理咨询中心(PCC)的合作对话带来了项目发展的重要转折点。这次对话让我们深刻理解了专业心理健康服务的边界和责任，并重新设计了ReachIn的角色定位。</p><p><strong>新的协作模式不是竞争关系，而是互补生态：</strong></p><ul><li><strong>AI承担的职责</strong>：24&#x2F;7情感支持、日常压力疏导、初步风险筛查、用户教育引导</li><li><strong>专业咨询师专注的领域</strong>：复杂心理问题诊断、危机干预、深度治疗、长期康复指导</li><li><strong>协作机制</strong>：建立标准化的转介流程、共享脱敏化的用户洞察、制定清晰的伦理边界</li></ul><p>这种模式被我们称作<strong>第一步沟通</strong>，也就是在与专业的心理咨询师沟通前，先通过AI进行初步的情感支持和问题识别。或者在日以继夜的陪伴中，帮助用户缓解日常的小情绪（我们相信，情绪是会积少成多，最终成为心理疾病的），从而降低专业咨询师的工作负担。</p><p>这种模式的最大价值在于：<strong>它为心理健康服务生态系统创造了增量价值，而不是零和博弈。</strong>AI处理了大量日常性、重复性的情感支持需求，让专业咨询师能够将有限的时间和精力投入到真正需要人类专业判断的复杂案例上。</p><!-- 0621OurResearchPaper.png --><p><img src="/assets/0621OurResearchPaper.png" alt="研究论文"><br><em>图15：我们转写的研究调查报告（Paper形式）</em></p><h2 id="反思与学习：年轻创新者的成长历程"><a href="#反思与学习：年轻创新者的成长历程" class="headerlink" title="反思与学习：年轻创新者的成长历程"></a>反思与学习：年轻创新者的成长历程</h2><h3 id="挑战与突破"><a href="#挑战与突破" class="headerlink" title="挑战与突破"></a>挑战与突破</h3><p><strong>时间管理的教训：</strong><br>作为两人团队，Leo承担了几乎所有的编程工作，包括前端和后端开发。虽然团队制定了工作计划，但经常因为对工作量和所需时间的误判而导致计划延误。这个经历教会了他们在未来项目中更加谨慎地评估时间需求。</p><p><strong>沟通协作的优化：</strong><br>在开发的第二周，团队经历了一次重要的沟通危机。Jason负责信息收集，Leo负责代码编写，但两人缺乏密切沟通（比如每日一次），导致Leo实现的功能与Jason的研究发现不匹配。通过建立每日会议和沟通机制，团队迅速解决了这个问题。</p><p><strong>技术架构的进化：</strong><br>从最初的简单本地应用到最终的分布式云架构，团队在技术选择上也经历了重要成长。使用Docker容器化、独立数据库部署、前后端分离等技术，让他们体验了真正面向社会服务的软件开发过程。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>虽然Capstone的4周结束了，我们的项目和WeService还在继续。我们会继续走下去，努力让ReachIn成为本地社区、国内甚至是具有国际影响的心理健康支持平台。</p><p>ReachIn只是开始。我们相信，随着更多年轻创新者的加入，随着技术与人文关怀的进一步融合，心理健康支持将变得更加普惠、及时和有效。重要的不是技术本身有多先进，而是它能否真正服务于人的福祉。</p><p>体验ReachIn平台： <a href="http://chat.mura.ink/">http://chat.mura.ink/</a> （暂未开放）</p><p>项目开源地址即将发布，敬请关注我们的后续更新。</p><p>如果这篇文章对你有启发，欢迎分享给更多关注青少年心理健康的朋友。每一次传播，都可能触达到那个正在黑暗中寻找光明的年轻心灵。</p><p>最后编辑于：2025-06-30 18:46</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/assets/0621header.png&quot; alt=&quot;Header Image&quot;&gt;&lt;/p&gt;
&lt;p&gt;想象一下这样的场景：凌晨2点，一个高中生因为家庭争吵而失眠，内心充满焦虑和困惑。传统的心理咨询预约需要等待数周，而且还要通知家长和班主任——这让本就脆弱</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于开源的一些随笔</title>
    <link href="https://blog.lanbin.top/p/9e0fb3e9.html"/>
    <id>https://blog.lanbin.top/p/9e0fb3e9.html</id>
    <published>2024-07-15T19:53:03.000Z</published>
    <updated>2025-06-30T10:57:08.308Z</updated>
    
    <content type="html"><![CDATA[<p>许多人虽然从事开源项目，但对开源协议的具体规定理解仍然较为模糊。他们依然会本能地认为这些项目是属于自己的，尽管已经开源，但仍觉得使用权限由自己决定，最终解释权归自己所有。然而，开源并不是这样的。</p><p>对于市面上几乎所有的主流开源协议，如MIT、Apache、GPL等，当你选择开源时，意味着任何人都可以自由复制、使用、修改、分发你的代码。而且，注意，这并不要求必须在GitHub上点击fork才算符合协议的复制。任何形式的复制，包括将源代码打包传到自己的网站上，都是合法合规的。当然，每个协议在修改时都有其特定的规定，大多数协议要求保留原协议和署名，这里暂且不提。</p><p>但如果仅仅是复制你的开源代码并放在其他地方，是完全没有问题的。即使使用了你的用户名，用户名也不受法律保护。然而，这一切的前提是代码具有开源协议。有些人认为在GitHub上公开的仓库不都是开源代码，这种看法是错误的。公开源代码和开源是两个不同的概念。</p><p>开源的核心不是那些公开的源代码，而是规定源代码如何使用的协议，即仓库中最不起眼的许可证文件。有了这个文件，项目才是开源的；没有这个文件，即使源代码完全公开，也不能自由使用。公开的源代码放在路边，也不能随便拿走，就像在路边遇到一个人，也不能随意接触。</p><p>因此，即使那些有开源协议的代码你可以直接拿来放在自己网站上，但那些没有开源协议的代码，你不能随意复制和分发，这样做是侵权的。当然，我们这里讨论的是理论上的规定，实际操作中可能会遇到许多复杂因素，比如某人抄袭了你在GitHub上的项目，你打算起诉他，但对方可能会问你GitHub是什么，你如何登录等，这些问题可能会使事情变得复杂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;许多人虽然从事开源项目，但对开源协议的具体规定理解仍然较为模糊。他们依然会本能地认为这些项目是属于自己的，尽管已经开源，但仍觉得使用权限由自己决定，最终解释权归自己所有。然而，开源并不是这样的。&lt;/p&gt;
&lt;p&gt;对于市面上几乎所有的主流开源协议，如MIT、Apache、GPL</summary>
      
    
    
    
    <category term="随笔" scheme="https://blog.lanbin.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Github" scheme="https://blog.lanbin.top/tags/Github/"/>
    
    <category term="开源" scheme="https://blog.lanbin.top/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Tap To Midi | 用键盘敲击鼓点生成MIDI文件</title>
    <link href="https://blog.lanbin.top/p/70975104.html"/>
    <id>https://blog.lanbin.top/p/70975104.html</id>
    <published>2024-03-18T18:10:02.000Z</published>
    <updated>2025-06-30T10:57:08.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近参加了“清澜好声音”需要扒谱一首音乐作为伴奏，沙克负责了旋律部分，将打击乐部分交给了我。由于找不到完美匹配的MIDI文件，于是我自己动手，花了一点时间写了一个能够通过敲击键盘来记录鼓点，并导出为MIDI文件的程序。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我请ChatGPT编写了一个简单的Python程序，它允许用户通过敲击键盘的空格键来模拟鼓点。程序记录下每次击打的时间点，并将它们转换成MIDI格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mido</span><br><span class="line"><span class="keyword">from</span> mido <span class="keyword">import</span> MidiFile, MidiTrack, Message</span><br><span class="line"><span class="keyword">import</span> keyboard</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">bpm = <span class="number">120</span>  <span class="comment"># 设置BPM</span></span><br><span class="line">beats_per_second = bpm / <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Press and hold SPACE to start recording. Release to stop.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        keyboard.wait(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        times = []</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Recording... Press SPACE to mark the beat. Press ESC to finish.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                keyboard.wait(<span class="string">&#x27;space&#x27;</span>)</span><br><span class="line">                times.append(time.time() - start_time)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Beat!&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> keyboard.is_pressed(<span class="string">&#x27;esc&#x27;</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        mid = MidiFile()</span><br><span class="line">        track = MidiTrack()</span><br><span class="line">        mid.tracks.append(track)</span><br><span class="line">        track.append(Message(<span class="string">&#x27;program_change&#x27;</span>, program=<span class="number">12</span>, time=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        last_time = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> times:</span><br><span class="line">            ticks = <span class="built_in">int</span>(mido.second2tick(t - last_time, mid.ticks_per_beat, mido.bpm2tempo(bpm)))</span><br><span class="line">            track.append(Message(<span class="string">&#x27;note_on&#x27;</span>, note=<span class="number">36</span>, velocity=<span class="number">64</span>, time=ticks))</span><br><span class="line">            track.append(Message(<span class="string">&#x27;note_off&#x27;</span>, note=<span class="number">36</span>, velocity=<span class="number">64</span>, time=<span class="number">0</span>))</span><br><span class="line">            last_time = t</span><br><span class="line"></span><br><span class="line">        midi_file_name = <span class="string">&quot;drum_beat.mid&quot;</span></span><br><span class="line">        mid.save(midi_file_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;MIDI file saved as <span class="subst">&#123;midi_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ol><li><p>初始化：首先，我们设置了BPM（每分钟节拍数），然后准备接收用户的输入。</p></li><li><p>记录鼓点：程序使用<code>keyboard</code>库等待用户按下空格键开始录制，并记录每次按键的时间点。</p></li><li><p>生成MIDI：一旦录制完成，我们将这些时间点转换成MIDI格式。每个时间点被转换成一个鼓点音符（MIDI标准中的36号音符），并根据其在录制中的时间安排在MIDI文件中。</p></li><li><p>导出MIDI文件：最后，程序将所有的MIDI消息保存到一个轨道中，并将该轨道添加到MIDI文件中。然后将文件保存到本地磁盘。</p></li></ol><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>通过使用这个程序，我们可以准确地记录下想要的鼓点，并转换成MIDI文件。如果你有任何需要自定义MIDI鼓点的需求，feel free to try this code!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近参加了“清澜好声音”需要扒谱一首音乐作为伴奏，沙克负责了旋律部分，将打击乐部分交给了我。由于找不到完美匹配的MIDI文件，于是我自己动手</summary>
      
    
    
    
    <category term="代码" scheme="https://blog.lanbin.top/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="Python" scheme="https://blog.lanbin.top/tags/Python/"/>
    
    <category term="Music" scheme="https://blog.lanbin.top/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>2024 ACSL中级组第三轮编程解析</title>
    <link href="https://blog.lanbin.top/p/eed79f2.html"/>
    <id>https://blog.lanbin.top/p/eed79f2.html</id>
    <published>2024-03-17T16:30:50.000Z</published>
    <updated>2025-06-30T10:57:08.308Z</updated>
    
    <content type="html"><![CDATA[<p>今天考了ACSL中级组第三轮，题目还是比较有意思的。是关于Rack-O游戏的模拟。</p><p>根据题目比较机翻的描述：Rack-O游戏是一种纸牌游戏，玩家需要在牌架上摆放卡牌，并且在抽取卡牌堆中的卡牌时，按照一定的规则进行替换。这次的题目就是要求我们模拟这个游戏的过程，并且计算最后的得分。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 ACSL 版的 Rack-O 游戏中，玩家会被告知卡槽数量 s，以及卡牌数量 n。每张卡牌上都有一个在 1 到 n 之间（包括 1 和 n）的专属数字。玩家将会收到 s 张卡牌，然后将这些卡牌从前至后摆放在牌架上。除此之外，玩家还会收到一叠卡牌，形成一个抽牌堆，按照卡牌叠放顺序依次抽牌。如果牌架上的卡牌未按升序排列，那么对于每一张抽到的卡牌都要按以下顺序遵循下列规则：</p><ol><li><p>除牌架上第一张卡牌之外，如果抽到的卡牌的数字比在牌架上某一张卡牌上的数字小 1，则用这张抽到的卡牌替换牌架上这张牌前面的卡牌。</p></li><li><p>除牌架上最后一张卡牌之外，如果抽到的卡牌的数字比牌架上某一张卡牌上的数字大 1，则用这张抽到的牌替换牌架上这张牌后面的卡牌。</p></li><li><p>对于牌架上任意三张在相邻卡槽中的卡牌，如果在中间位置的卡牌上的数字并不介于这三张中第一张卡牌和最后一张卡牌的数字之间，但抽到的卡牌上的数字介于其间，则用抽到的卡牌替换在中间位置的卡牌。</p></li><li><p>如果抽到的卡牌比牌架上第二张卡牌小且牌架上第一张卡牌比第二张卡牌大，则用抽到的卡牌替换牌架上第一张卡牌。</p></li><li><p>如果抽到的卡牌比牌架上倒数第二张卡牌大且牌架上最后一张卡牌比倒数第二张卡牌小，则用抽到的卡牌替换最后一张卡牌。</p></li><li><p>否则，放弃使用抽到的卡牌，抽取下一张。</p></li></ol><p>如果牌架上出现 3 张或更多张数字连续的卡牌，那么这些数字连续的卡牌每张都可以再加上5 分的奖励分。例如，如果牌架上出现数字 45、46、47，就可以额外加上 15 分的奖励分；如果牌架上出现数字 3、4、5、6，就可以额外加上 20 分的奖励分。但是，如果抽牌堆中的卡牌全部抽取完毕，但牌架上的所有卡牌未按升序排列，那么牌架值将会等于牌架上卡牌数字 递减 次数的相反数。举例来说，如果牌架上的卡牌数字序列为 40、47、20、56、15、16、17，那么数字 47 之后紧接着是较小的数字 20，数字 56 之后紧接着是较小的数字 15，这两次递减都会计入次数。并且，由于牌架上所有卡牌未按升序排列，因此 15, 16, 17 不计奖励分。所以最后牌架值等于 -2 。</p><table><thead><tr><th>输入数据</th><th>输出数据</th></tr></thead><tbody><tr><td>10 60 <br> 40 35 20 56 32 58 42 17 45 34 <br> 31 44 10 28 19 46 7 37 16 2</td><td>341</td></tr><tr><td>15 90 <br> 15 12 18 9 28 17 46 51 7 53 65 70 74 84 47 <br> 45 73 3 52 54 16 21 44 87 40 68 30 20</td><td>752</td></tr><tr><td>12 130 <br> 20 110 30 16 84 40 91 69 75 7 81 15 <br> 39 47 114 55 35 71 25 123 51 23 34 10 77 36 115</td><td>656</td></tr><tr><td>8 100 <br> 6 13 47 62 32 70 76 12 <br> 3 67 80 10 39 44 2 43 40 85 21 33 4 52</td><td>421</td></tr><tr><td>12 110 <br> 44 35 22 25 79 100 85 69 87 3 56 28 <br> 97 10 48 43 42 21 81 47 86 88 80 54 24 50</td><td>-1</td></tr></tbody></table><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rank-O游戏模拟</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkIfEnd</span>(<span class="params">rank</span>):</span><br><span class="line">    <span class="comment"># 如果rank是升序排列的，返回True</span></span><br><span class="line">    <span class="keyword">if</span> rank == <span class="built_in">sorted</span>(rank):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calcBonus</span>(<span class="params">rank</span>):</span><br><span class="line">    bonus = <span class="number">0</span></span><br><span class="line">    consecutive_count = <span class="number">1</span>  <span class="comment"># 记录当前连续卡牌的数量</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(rank)):</span><br><span class="line">        <span class="keyword">if</span> rank[i] == rank[i-<span class="number">1</span>] + <span class="number">1</span>:</span><br><span class="line">            consecutive_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> consecutive_count &gt;= <span class="number">3</span>:  <span class="comment"># 如果有3张或更多连续卡牌</span></span><br><span class="line">                bonus += consecutive_count * <span class="number">5</span></span><br><span class="line">            consecutive_count = <span class="number">1</span>  <span class="comment"># 重置连续卡牌计数</span></span><br><span class="line">    <span class="keyword">if</span> consecutive_count &gt;= <span class="number">3</span>:  <span class="comment"># 最后一组连续卡牌的处理</span></span><br><span class="line">        bonus += consecutive_count * <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算牌架未按升序排列时的情况</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sorted</span>(rank) != rank:  <span class="comment"># 如果牌架未按升序排列</span></span><br><span class="line">        decrement_count = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(rank)) <span class="keyword">if</span> rank[i] &lt; rank[i-<span class="number">1</span>])</span><br><span class="line">        bonus = -decrement_count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bonus</span><br><span class="line"></span><br><span class="line">s, n = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">rank = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">heap = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">current_card = <span class="number">0</span></span><br><span class="line">use = <span class="number">0</span></span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> checkIfEnd(rank) <span class="keyword">and</span> times &lt; n:</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        current_card = heap.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># print(rank, &quot;C&quot;,current_card, &quot;U&quot;, use)</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="literal">False</span> <span class="comment"># 是否有满足的条件</span></span><br><span class="line">    use = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rank)):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> current_card == rank[i] - <span class="number">1</span>:</span><br><span class="line">            rank[i - <span class="number">1</span>] = current_card</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            use = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rank)):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="built_in">len</span>(rank) - <span class="number">1</span> <span class="keyword">and</span> current_card == rank[i] + <span class="number">1</span>:</span><br><span class="line">            rank[i + <span class="number">1</span>] = current_card</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            use = <span class="number">2</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag: <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rank)):</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> i != <span class="built_in">len</span>(rank) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> current_card &gt; rank[i - <span class="number">1</span>] <span class="keyword">and</span> current_card &lt; rank[i + <span class="number">1</span>] <span class="keyword">and</span> (rank[i] &lt; rank[i - <span class="number">1</span>] <span class="keyword">or</span> rank[i] &gt; rank[i + <span class="number">1</span>]):</span><br><span class="line">                rank[i] = current_card</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                use = <span class="number">3</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag: <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rank)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">and</span> current_card &lt; rank[<span class="number">1</span>] <span class="keyword">and</span> rank[<span class="number">0</span>] &gt; rank[<span class="number">1</span>]:</span><br><span class="line">            rank[<span class="number">0</span>] = current_card</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            use = <span class="number">4</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag: <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rank)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="built_in">len</span>(rank) - <span class="number">2</span> <span class="keyword">and</span> current_card &gt; rank[-<span class="number">2</span>] <span class="keyword">and</span> rank[-<span class="number">1</span>] &lt; rank[-<span class="number">2</span>]:</span><br><span class="line">            rank[-<span class="number">1</span>] = current_card</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line">            use = <span class="number">5</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag: <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">points = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> checkIfEnd(rank):</span><br><span class="line">    points = calcBonus(rank)+<span class="built_in">sum</span>(rank)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    points = calcBonus(rank)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(points)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是把这个代码写完了昂</p><p><img src="/../assets/240317-acsl-answer/1.png" alt="alt text"></p><p>过的非常干脆利索，没有任何问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然过的干脆利落，但是我最后答完题后流连于监考会议室，没有正确摆放监考设备，被监考老师抓住了，拉到讨论室里说了一顿，我连忙展示我已经完成了题目，我也不知道最后结果如何，希望能过吧，实在不行就找组委会讲理去。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天考了ACSL中级组第三轮，题目还是比较有意思的。是关于Rack-O游戏的模拟。&lt;/p&gt;
&lt;p&gt;根据题目比较机翻的描述：Rack-O游戏是一种纸牌游戏，玩家需要在牌架上摆放卡牌，并且在抽取卡牌堆中的卡牌时，按照一定的规则进行替换。这次的题目就是要求我们模拟这个游戏的过程，</summary>
      
    
    
    
    <category term="代码" scheme="https://blog.lanbin.top/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="ACSL" scheme="https://blog.lanbin.top/tags/ACSL/"/>
    
    <category term="Python" scheme="https://blog.lanbin.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>添情</title>
    <link href="https://blog.lanbin.top/p/a4bbf5c1.html"/>
    <id>https://blog.lanbin.top/p/a4bbf5c1.html</id>
    <published>2024-03-17T11:16:14.000Z</published>
    <updated>2025-06-30T10:57:08.308Z</updated>
    
    <content type="html"><![CDATA[<p>旧时只言冬晴好，<br>今日却盼春满城。<br>待到杨絮纷吹去，<br>风雨晴中风雨情。</p><p>In days of yore, we praised the clear winter sky,<br>Now we long for spring to fill the city wide.<br>Awaiting when the willow fluffs have blown away,<br>Through storms and calm, our bond remains, come what may.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;旧时只言冬晴好，&lt;br&gt;今日却盼春满城。&lt;br&gt;待到杨絮纷吹去，&lt;br&gt;风雨晴中风雨情。&lt;/p&gt;
&lt;p&gt;In days of yore, we praised the clear winter sky,&lt;br&gt;Now we long for spring to fill t</summary>
      
    
    
    
    <category term="随笔" scheme="https://blog.lanbin.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Poem" scheme="https://blog.lanbin.top/tags/Poem/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Github 自动部署和一些踩坑经验</title>
    <link href="https://blog.lanbin.top/p/97df2bec.html"/>
    <id>https://blog.lanbin.top/p/97df2bec.html</id>
    <published>2024-03-17T10:39:55.000Z</published>
    <updated>2025-06-30T10:57:08.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天在捣鼓Hexo博客。我就在想，如果每次写完博客，我该如何发布到网上去呢？我第一个想到的就是Github pages的静态文件托管，但是每次都要手动执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>，这样太麻烦了。于是我就想到了Github Actions。</p><h2 id="配置分享"><a href="#配置分享" class="headerlink" title="配置分享"></a>配置分享</h2><p>在经过了无数次的失败后，我终于成功了。我将我的配置分享出来，希望对你有所帮助。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># 或者你使用的是master分支，就改为master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;21&#x27;</span> <span class="comment"># 可以根据需要选择Node.js的版本</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install hexo -g</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        git clone https://github.com/saicaca/hexo-theme-vivia.git themes/vivia</span></span><br><span class="line"><span class="string">        npm install colorjs.io stylus hexo-symbols-count-time</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">static</span> <span class="string">pages</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span>  <span class="comment"># Hexo默认生成的目录</span></span><br></pre></td></tr></table></figure><p>这个actions比较好看懂。</p><ol><li>首先是<code>on</code>，表示在什么时候执行这个actions。这里是在push到main分支的时候执行。</li><li><code>jobs</code>就是你这个actions要执行的任务。这里只有一个任务，叫<code>deploy</code>。</li><li><code>runs-on</code>表示这个任务要在什么环境下执行。这里是在ubuntu-latest下执行。</li><li><code>steps</code>就是这个任务要执行的步骤。这里有6个步骤。<ul><li><code>actions/checkout@v2</code>是用来checkout代码的（其实我也不知道有啥用）。</li><li><code>actions/setup-node@v1</code>是用来安装Node.js的，版本按照你的需求修改。</li><li><code>actions/cache@v2</code>是用来缓存依赖的，如果你的主机上已经有了依赖，就不用再安装了。</li><li><code>npm install</code>是用来安装依赖的，这个地方要根据不同的主题做定制化的修改，我这里是vivia。</li><li><code>hexo generate</code>是用来生成博客静态文件的。</li><li><code>peaceiris/actions-gh-pages@v3</code>是用来将你的静态文件发布到Github Pages上的。</li></ul></li></ol><h2 id="踩坑！"><a href="#踩坑！" class="headerlink" title="踩坑！"></a>踩坑！</h2><p>有一些小的容易踩坑的点，比如如果发现每次部署之后自定义pages域名被刷掉了，可以在<code>source</code>文件夹中添加CNAME文件，这样就可以保证每次部署之后自定义pages域名不会被刷掉（hexo会复制这个文件到部署目录）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这两天在捣鼓Hexo博客。我就在想，如果每次写完博客，我该如何发布到网上去呢？我第一个想到的就是Github pages的静态文件托管，但是</summary>
      
    
    
    
    <category term="经验" scheme="https://blog.lanbin.top/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Blog" scheme="https://blog.lanbin.top/tags/Blog/"/>
    
    <category term="Hexo" scheme="https://blog.lanbin.top/tags/Hexo/"/>
    
    <category term="Github" scheme="https://blog.lanbin.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://blog.lanbin.top/p/4a17b156.html"/>
    <id>https://blog.lanbin.top/p/4a17b156.html</id>
    <published>2024-03-16T16:17:03.000Z</published>
    <updated>2025-06-30T10:57:08.309Z</updated>
    
    <content type="html"><![CDATA[<p>Long lost.<br>I picked up my pen again.<br>The story of the past let it be dusted off and<br>No one will ever know again.</p><p>Standing on the heights of stone<br>I realized I couldn’t see<br>My past, my footprints<br>My lost time and youth</p><p>The fields ahead are still turquoise<br>The mountains are still high when I look back</p><p>And I kneel in reverence<br>Mary told me.<br>“Child, write.<br>“before the truth is lost in the abyss.<br>“before the future is still hopeful.<br>Remember what was first.<br>–It’s the only way. “</p><p>久违了。<br>我再次拿起笔。<br>过去的故事，就让它尘封起来吧，而且<br>再无人知晓。</p><p>站在石头的高处<br>我发现我看不见<br>我的过去，我的足迹<br>我逝去的时光和青春</p><p>前方的田野依然碧绿<br>蓦然回首，高山依旧</p><p>我虔诚地跪下<br>玛丽告诉我<br>“孩子，写吧<br>“在真相迷失在深渊之前<br>“在未来还充满希望之前<br>记住最初的一切<br>–这是唯一的办法 “</p><p>再见，Halo。<br>愿下次见面，你还是少年。<br>你好，Hexo。<br>愿往后余生，你还在身边。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Long lost.&lt;br&gt;I picked up my pen again.&lt;br&gt;The story of the past let it be dusted off and&lt;br&gt;No one will ever know again.&lt;/p&gt;
&lt;p&gt;Standing</summary>
      
    
    
    
    <category term="随笔" scheme="https://blog.lanbin.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Blog" scheme="https://blog.lanbin.top/tags/Blog/"/>
    
    <category term="Theme" scheme="https://blog.lanbin.top/tags/Theme/"/>
    
  </entry>
  
</feed>
